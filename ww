import os
import sys
import boto3
import csv


# global variable which is used to track all the region data
regions = []

def main(sess):
	'''
	:param sess: the aws session variable
	main is the main entrypoint into the script and is responsible for deleting the unused ebs volumes/amis
	'''

	try:
		get_ec2_info(sess)



	except Exception as e:
		print(e)
		sys.exit(1)

def get_ec2_info(sess):
	for region in regions:
		ec2_client = sess.client('ec2', region_name=region)
		response = ec2_client.describe_instances()
		for reservation in response["Reservations"]:
			for instance in reservation["Instances"]:
				# get the ami information for the instance
				image_id = instance["ImageId"]

				# describe the ami with the given image_id
				for image in ec2_client.describe_images(Owners=['self'], ImageIds=[image_id])["Images"]:
					print(f'{image_id}\t--\t{image["PlatformDetails"]}\t{image["ImageType"]}')

			# an instance profile is none if the state of the ec2 instance is stopped
			if instance.get("IamInstanceProfile") is not None:
				instance_profile = instance.get('IamInstanceProfile')

				iam_client = sess.client('iam', region_name=region)

				# get_instance_profile requires a InstanceProfile name, this can be derived by the following
				# Arn': 'arn:aws:iam::1234567890:instance-profile/{instanceprofileOrRolename}'
				instance_profile_name = instance_profile["Arn"].split("/")[-1]
				if instance_profile_name != "":
					instance_profile_info = iam_client.get_instance_profile(InstanceProfileName=instance_profile_name)
					for roles in instance_profile_info["InstanceProfile"]["Roles"]:
						print('------------')
						# if roles["RoleName"] == "SSM":
						# 	print("SSM ROLE")
						print(roles["RoleName"])

if __name__ == "__main__":
	AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
	AWS_SECRET_ACCESS_KEY= os.getenv('AWS_SECRET_ACCESS_KEY')
	AWS_REGION = os.getenv('AWS_REGION', "us-east-2")

	if AWS_ACCESS_KEY_ID is None or AWS_ACCESS_KEY_ID == "":
		print('AWS_ACCESS_KEY_ID is a required environment variable')
		os.exit(1)

	if AWS_SECRET_ACCESS_KEY is None or AWS_SECRET_ACCESS_KEY == "":
		print('AWS_SECRET_ACCESS_KEY is a required environment variable')
		os.exit(1)

	sess = boto3.Session(
		aws_access_key_id= AWS_ACCESS_KEY_ID,
		aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
		region_name=AWS_REGION,
	)

	# variable to store all the regions for the tasks at hand
	ec2_instance = sess.client('ec2')
	response = ec2_instance.describe_regions()
	for reg in response['Regions']:
		regions.append(reg.get("RegionName"))

	main(sess)

